theory OpenID4VP_Over_BLE begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, h/1, kdf/2, pair/2, pk/1, sdec/2, senc/2, sign/2,
           snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



heuristic: O "./oracle.py"







rule (modulo E) VerifierSetup:
   [ Fr( ~vsk ) ] --> [ !Verifier( $V, ~vsk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) VerifierLeak:
   [ !Verifier( $V, ~vsk ) ]
  --[ SomeCompromise( ), CompromisedVerifier( $V ) ]->
   [ Out( ~vsk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) WalletSetup:
   [ Fr( ~wsk ) ]
  --[ HonestWalletKey( pk(~wsk) ) ]->
   [ !Wallet( $W, ~wsk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) WalletLeak:
   [ !Wallet( $W, ~wsk ) ]
  --[ SomeCompromise( ), CompromisedWallet( $W, pk(~wsk) ) ]->
   [ Out( ~wsk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SCAN_RESP:
   [ Fr( ~eph ), !Verifier( $V, vsk ) ]
  -->
   [ Out( <'resp', 'g'^~eph> ), !St_VerInit( $V, ~eph ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IDENTIFY_REQ:
   [ In( <'resp', verifierEPk> ), !Wallet( $W, ~wsk ), Fr( ~n ), Fr( ~eph )
   ]
  -->
   [
   Out( <'identify_req', 'g'^~eph, ~n> ),
   St_WalletRdy( $W, 'g'^~eph, verifierEPk, kdf(verifierEPk^~eph, ~n) )
   ]

  /*
  rule (modulo AC) IDENTIFY_REQ:
     [ In( <'resp', verifierEPk> ), !Wallet( $W, ~wsk ), Fr( ~n ), Fr( ~eph )
     ]
    -->
     [
     Out( <'identify_req', 'g'^~eph, ~n> ),
     St_WalletRdy( $W, 'g'^~eph, verifierEPk, kdf(z, ~n) )
     ]
    variants (modulo AC)
    1. ~eph  = ~eph.14
       verifierEPk
             = verifierEPk.17
       z     = verifierEPk.17^~eph.14
    
    2. ~eph  = ~eph.18
       verifierEPk
             = z.25^inv(~eph.18)
       z     = z.25
    
    3. ~eph  = ~eph.63
       verifierEPk
             = x.122^x.123
       z     = x.122^(~eph.63*x.123)
    
    4. ~eph  = ~eph.66
       verifierEPk
             = x.128^inv((~eph.66*x.129))
       z     = x.128^inv(x.129)
    
    5. ~eph  = ~eph.66
       verifierEPk
             = x.128^(x.129*inv(~eph.66))
       z     = x.128^x.129
    
    6. ~eph  = ~eph.67
       verifierEPk
             = x.129^(x.130*inv((~eph.67*x.131)))
       z     = x.129^(x.130*inv(x.131))
    
    7. verifierEPk
             = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) OID4VP_REQ:
   [
   In( <'identify_req', walletEPk, n> ), Fr( ~nReq ),
   !St_VerInit( $V, ~eph ), !Verifier( $V, ~vsk )
   ]
  --[ InitVerifier( $V, kdf(walletEPk^~eph, n), n ) ]->
   [
   Out( senc(<<'oid4vp_req', $V, h('g'^~eph), ~nReq>, 
              sign(<'oid4vp_req', $V, h('g'^~eph), ~nReq>, ~vsk)>,
             kdf(walletEPk^~eph, n))
   ),
   St_VerRdy( $V, walletEPk, kdf(walletEPk^~eph, n), ~nReq )
   ]

  /*
  rule (modulo AC) OID4VP_REQ:
     [
     In( <'identify_req', walletEPk, n> ), Fr( ~nReq ),
     !St_VerInit( $V, ~eph ), !Verifier( $V, ~vsk )
     ]
    --[ InitVerifier( $V, kdf(z, n), n ) ]->
     [
     Out( senc(<<'oid4vp_req', $V, h('g'^~eph), ~nReq>, 
                sign(<'oid4vp_req', $V, h('g'^~eph), ~nReq>, ~vsk)>,
               kdf(z, n))
     ),
     St_VerRdy( $V, walletEPk, kdf(z, n), ~nReq )
     ]
    variants (modulo AC)
    1. ~eph  = ~eph.16
       walletEPk
             = walletEPk.20
       z     = walletEPk.20^~eph.16
    
    2. ~eph  = ~eph.20
       walletEPk
             = z.28^inv(~eph.20)
       z     = z.28
    
    3. ~eph  = ~eph.69
       walletEPk
             = x.134^x.135
       z     = x.134^(~eph.69*x.135)
    
    4. ~eph  = ~eph.73
       walletEPk
             = x.142^inv((~eph.73*x.143))
       z     = x.142^inv(x.143)
    
    5. ~eph  = ~eph.73
       walletEPk
             = x.142^(x.143*inv(~eph.73))
       z     = x.142^x.143
    
    6. ~eph  = ~eph.74
       walletEPk
             = x.143^(x.144*inv((~eph.74*x.145)))
       z     = x.143^(x.144*inv(x.145))
    
    7. walletEPk
             = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) OID4VP_RESP:
   [
   !Verifier( $V, ~vsk ), !Wallet( $W, ~wsk ), Fr( ~token ),
   In( senc(<<'oid4vp_req', $V, h(verifierEPk), n>, reqSig>, sharedKey) ),
   St_WalletRdy( $W, walletEPk, verifierEPk, sharedKey )
   ]
  --[
  SecretFor( $V, ~token ),
  SendVC( $W, pk(~wsk), $V, sharedKey, n, ~token ),
  VerifiableCredential( <'vc', pk(~wsk), h(<n, walletEPk>), ~token> ),
  Eq( verify(reqSig, <'oid4vp_req', $V, h(verifierEPk), n>, pk(~vsk)), true
  )
  ]->
   [
   Out( senc(<<'vc', pk(~wsk), h(<n, walletEPk>), ~token>, 
              sign(<'vc', pk(~wsk), h(<n, walletEPk>), ~token>, ~wsk)>,
             sharedKey)
   )
   ]

  /*
  rule (modulo AC) OID4VP_RESP:
     [
     !Verifier( $V, ~vsk ), !Wallet( $W, ~wsk ), Fr( ~token ),
     In( senc(<<'oid4vp_req', $V, h(verifierEPk), n>, reqSig>, sharedKey) ),
     St_WalletRdy( $W, walletEPk, verifierEPk, sharedKey )
     ]
    --[
    SecretFor( $V, ~token ),
    SendVC( $W, pk(~wsk), $V, sharedKey, n, ~token ),
    VerifiableCredential( <'vc', pk(~wsk), h(<n, walletEPk>), ~token> ),
    Eq( z, true )
    ]->
     [
     Out( senc(<<'vc', pk(~wsk), h(<n, walletEPk>), ~token>, 
                sign(<'vc', pk(~wsk), h(<n, walletEPk>), ~token>, ~wsk)>,
               sharedKey)
     )
     ]
    variants (modulo AC)
    1. $V    = $V.23
       ~vsk  = ~vsk.26
       n     = n.28
       reqSig
             = reqSig.29
       verifierEPk
             = verifierEPk.31
       z     = verify(reqSig.29, <'oid4vp_req', $V.23, h(verifierEPk.31), n.28>,
                      pk(~vsk.26))
    
    2. $V    = $V.23
       ~vsk  = ~vsk.26
       n     = n.28
       reqSig
             = sign(<'oid4vp_req', $V.23, h(verifierEPk.31), n.28>, ~vsk.26)
       verifierEPk
             = verifierEPk.31
       z     = true
  */

rule (modulo E) OID4VP_RECV:
   [
   In( senc(<<'vc', wpk, h(<n, walletEPk>), t>, vcSig>, sharedKey) ),
   St_VerRdy( $V, walletEPk, sharedKey, n )
   ]
  --[
  Success( $V, sharedKey, wpk, n, t ),
  Eq( verify(vcSig, <'vc', wpk, h(<n, walletEPk>), t>, wpk), true )
  ]->
   [ ]

  /*
  rule (modulo AC) OID4VP_RECV:
     [
     In( senc(<<'vc', wpk, h(<n, walletEPk>), t>, vcSig>, sharedKey) ),
     St_VerRdy( $V, walletEPk, sharedKey, n )
     ]
    --[ Success( $V, sharedKey, wpk, n, t ), Eq( z, true ) ]->
     [ ]
    variants (modulo AC)
    1. n     = n.11
       t     = t.13
       vcSig = vcSig.14
       walletEPk
             = walletEPk.15
       wpk   = wpk.16
       z     = verify(vcSig.14, <'vc', wpk.16, h(<n.11, walletEPk.15>), t.13>,
                      wpk.16)
    
    2. n     = n.15
       t     = t.17
       vcSig = sign(<'vc', pk(x.26), h(<n.15, walletEPk.19>), t.17>, x.26)
       walletEPk
             = walletEPk.19
       wpk   = pk(x.26)
       z     = true
  */

restriction Eq:
  "∀ a b #t. (Eq( a, b ) @ #t) ⇒ (a = b)"
  // safety formula

lemma Exec:
  exists-trace
  "∃ #x #y w wpk v k t n.
    ((SendVC( w, wpk, v, k, n, t ) @ #x) ∧
     (Success( v, k, wpk, n, t ) @ #y)) ∧
    (¬(∃ #x.1. SomeCompromise( ) @ #x.1))"
/*
guarded formula characterizing all satisfying traces:
"∃ #x #y w wpk v k t n.
  (SendVC( w, wpk, v, k, n, t ) @ #x) ∧ (Success( v, k, wpk, n, t ) @ #y)
 ∧
  ∀ #x.1. (SomeCompromise( ) @ #x.1) ⇒ ⊥"
*/
simplify
solve( !Verifier( $V, ~vsk ) ▶₀ #x )
  case VerifierSetup
  solve( !Wallet( $W, ~wsk ) ▶₁ #x )
    case WalletSetup
    solve( St_WalletRdy( $W, walletEPk, verifierEPk, k ) ▶₄ #x )
      case IDENTIFY_REQ
      solve( St_VerRdy( $V, walletEPk, kdf(z, ~n.1), n ) ▶₁ #y )
        case OID4VP_REQ
        solve( !KU( ~n ) @ #vk.9 )
          case IDENTIFY_REQ
          solve( !KU( senc(<<'oid4vp_req', $V, h(verifierEPk), ~nReq>, 
                            sign(<'oid4vp_req', $V, h(verifierEPk), ~nReq>, ~vsk)>,
                           kdf(z, ~n))
                 ) @ #vk.1 )
            case OID4VP_REQ
            solve( !KU( senc(<<'vc', pk(~wsk), h(<~nReq, 'g'^~eph>), ~token>, 
                              sign(<'vc', pk(~wsk), h(<~nReq, 'g'^~eph>), ~token>, ~wsk)>,
                             kdf('g'^(~eph*~eph.1), ~n))
                   ) @ #vk.4 )
              case OID4VP_RESP
              solve( !KU( 'g'^~eph.1 ) @ #vk.7 )
                case SCAN_RESP
                solve( !KU( 'g'^~eph ) @ #vk.9 )
                  case IDENTIFY_REQ
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Secrecy:
  all-traces
  "∀ #t v m.
    (SecretFor( v, m ) @ #t) ⇒
    ((¬(∃ #u. K( m ) @ #u)) ∨ (∃ #u. CompromisedVerifier( v ) @ #u))"
/*
guarded formula characterizing all counter-examples:
"∃ #t v m.
  (SecretFor( v, m ) @ #t)
 ∧
  (∃ #u. (K( m ) @ #u)) ∧ (∀ #u. (CompromisedVerifier( v ) @ #u) ⇒ ⊥)"
*/
simplify
solve( !KU( senc(<<'oid4vp_req', $V, h(verifierEPk), n>, 
                  sign(<'oid4vp_req', $V, h(verifierEPk), n>, ~vsk)>,
                 sharedKey)
       ) @ #vk )
  case OID4VP_REQ
  solve( St_WalletRdy( $W, walletEPk, 'g'^~eph, kdf(z, n) ) ▶₄ #t )
    case IDENTIFY_REQ
    solve( !KU( ~token ) @ #vk.1 )
      case OID4VP_RESP
      solve( !KU( 'g'^(~eph*~eph.1) ) @ #vk.11 )
        case IDENTIFY_REQ
        by solve( !KU( ~eph ) @ #vk.12 )
      next
        case SCAN_RESP
        by solve( !KU( ~eph.1 ) @ #vk.12 )
      next
        case c_exp
        by solve( !KU( ~eph ) @ #vk.14 )
      qed
    qed
  qed
next
  case c_senc
  solve( St_WalletRdy( $W, walletEPk, verifierEPk, sharedKey ) ▶₄ #t )
    case IDENTIFY_REQ
    solve( !KU( sign(<'oid4vp_req', $V, h(verifierEPk), n>, ~vsk)
           ) @ #vk.11 )
      case OID4VP_REQ
      solve( !KU( ~token ) @ #vk.2 )
        case OID4VP_RESP
        solve( !KU( 'g'^(~eph*~eph.1) ) @ #vk.21 )
          case IDENTIFY_REQ
          by solve( !KU( ~eph ) @ #vk.23 )
        next
          case SCAN_RESP
          by solve( !KU( ~eph.1 ) @ #vk.23 )
        next
          case c_exp
          by solve( !KU( ~eph ) @ #vk.25 )
        qed
      qed
    next
      case c_sign
      solve( !KU( ~vsk ) @ #vk.15 )
        case IDENTIFY_REQ
        by solve( !KU( ~token ) @ #vk.4 )
      next
        case OID4VP_REQ
        by solve( !KU( ~token ) @ #vk.4 )
      next
        case OID4VP_RESP
        solve( !KU( senc(<<'oid4vp_req', $V.1, h(verifierEPk.1), n.2>, 
                          sign(<'oid4vp_req', $V.1, h(verifierEPk.1), n.2>, ~vsk.1)>,
                         kdf(z.1, ~n.3))
               ) @ #vk.18 )
          case OID4VP_REQ
          solve( !KU( 'g'^(~eph.1*~eph.2) ) @ #vk.20 )
            case IDENTIFY_REQ
            by solve( !KU( ~eph.2 ) @ #vk.26 )
          next
            case SCAN_RESP
            by solve( !KU( ~eph.1 ) @ #vk.26 )
          next
            case c_exp
            by solve( !KU( ~eph.1 ) @ #vk.28 )
          qed
        next
          case c_senc
          solve( !KU( sign(<'oid4vp_req', $V.1, h(verifierEPk.1), n.2>, ~vsk.1)
                 ) @ #vk.29 )
            case OID4VP_REQ
            solve( !KU( 'g'^(~eph.1*~eph.2) ) @ #vk.23 )
              case IDENTIFY_REQ
              by solve( !KU( ~eph.2 ) @ #vk.36 )
            next
              case SCAN_RESP
              by solve( !KU( ~eph.1 ) @ #vk.36 )
            next
              case c_exp
              by solve( !KU( ~eph.1 ) @ #vk.38 )
            qed
          next
            case c_sign
            solve( !KU( ~vsk.1 ) @ #vk.30 )
              case VerifierLeak
              by solve( !KU( ~token ) @ #vk.9 )
            qed
          qed
        qed
      next
        case VerifierLeak
        solve( !KU( ~token ) @ #vk.4 )
          case OID4VP_RESP
          by contradiction /* from formulas */
        qed
      next
        case WalletLeak
        by solve( !KU( ~token ) @ #vk.4 )
      next
        case fresh
        by solve( !KU( ~token ) @ #vk.4 )
      qed
    qed
  qed
qed

lemma InjectiveAgreement:
  all-traces
  "∀ v shk wpk n token #t.
    (Success( v, shk, wpk, n, token ) @ #t) ⇒
    ((((∃ w #x.
         (SendVC( w, wpk, v, shk, n, token ) @ #x) ∧
         (∀ v2 shk2 wpk2 token2 #t2.
           (Success( v2, shk2, wpk2, n, token2 ) @ #t2) ⇒
           (((((v = v2) ∧ (wpk = wpk2)) ∧ (shk = shk2)) ∧ (token = token2)) ∧
            (#t = #t2)))) ∨
       (∃ #x. CompromisedVerifier( v ) @ #x)) ∨
      (∃ w #x. CompromisedWallet( w, wpk ) @ #x)) ∨
     (¬(∃ #x. HonestWalletKey( wpk ) @ #x)))"
/*
guarded formula characterizing all counter-examples:
"∃ v shk wpk n token #t.
  (Success( v, shk, wpk, n, token ) @ #t)
 ∧
  (∀ w #x.
    (SendVC( w, wpk, v, shk, n, token ) @ #x)
   ⇒
    ∃ v2 shk2 wpk2 token2 #t2.
     (Success( v2, shk2, wpk2, n, token2 ) @ #t2)
    ∧
     ((¬(v = v2)) ∨
      (¬(wpk = wpk2)) ∨
      (¬(shk = shk2)) ∨
      (¬(token = token2)) ∨
      (¬(#t = #t2)))) ∧
  (∀ #x. (CompromisedVerifier( v ) @ #x) ⇒ ⊥) ∧
  (∀ w #x. (CompromisedWallet( w, wpk ) @ #x) ⇒ ⊥) ∧
  (∃ #x. (HonestWalletKey( wpk ) @ #x))"
*/
simplify
solve( St_VerRdy( $V, walletEPk, shk, n ) ▶₁ #t )
  case OID4VP_REQ
  solve( !KU( senc(<<'vc', pk(~wsk), h(<~nReq, walletEPk>), token>, 
                    sign(<'vc', pk(~wsk), h(<~nReq, walletEPk>), token>, ~wsk)>,
                   kdf(z, n))
         ) @ #vk )
    case OID4VP_RESP
    solve( !KU( senc(<<'oid4vp_req', $V.1, h('g'^~eph.1), ~nReq>, 
                      sign(<'oid4vp_req', $V.1, h('g'^~eph.1), ~nReq>, ~vsk.2)>,
                     kdf('g'^(~eph*~eph.1), ~n))
           ) @ #vk.6 )
      case OID4VP_REQ
      solve( St_VerRdy( $V.1, walletEPk, shk2, ~nReq ) ▶₁ #t2 )
        case OID4VP_REQ
        by contradiction /* from formulas */
      qed
    next
      case c_senc
      solve( !KU( sign(<'oid4vp_req', $V.1, h('g'^~eph.1), ~nReq>, ~vsk.2)
             ) @ #vk.19 )
        case OID4VP_REQ
        solve( St_VerRdy( $V.1, walletEPk, shk2, ~nReq ) ▶₁ #t2 )
          case OID4VP_REQ
          by contradiction /* from formulas */
        qed
      next
        case c_sign
        solve( !KU( ~vsk.1 ) @ #vk.20 )
          case VerifierLeak
          solve( !KU( ~nReq ) @ #vk.20 )
            case OID4VP_REQ
            solve( !KU( kdf('g'^(~eph*~eph.1), ~n) ) @ #vk.14 )
              case c_kdf
              solve( !KU( 'g'^(~eph*~eph.1) ) @ #vk.21 )
                case IDENTIFY_REQ
                by solve( !KU( ~eph.1 ) @ #vk.22 )
              next
                case SCAN_RESP
                by solve( !KU( ~eph ) @ #vk.22 )
              next
                case c_exp
                by solve( !KU( ~eph ) @ #vk.24 )
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case c_senc
    solve( !KU( sign(<'vc', pk(~wsk), h(<~nReq, walletEPk>), token>, ~wsk)
           ) @ #vk.15 )
      case OID4VP_RESP
      solve( !KU( ~token ) @ #vk.16 )
        case OID4VP_RESP
        solve( !KU( senc(<<'oid4vp_req', $V.1, h(verifierEPk), ~nReq>, 
                          sign(<'oid4vp_req', $V.1, h(verifierEPk), ~nReq>, ~vsk.2)>,
                         kdf(z, ~n.1))
               ) @ #vk.17 )
          case OID4VP_REQ
          solve( !KU( 'g'^(~eph*~eph.1) ) @ #vk.20 )
            case IDENTIFY_REQ
            by solve( !KU( ~eph.1 ) @ #vk.22 )
          next
            case SCAN_RESP
            by solve( !KU( ~eph ) @ #vk.22 )
          next
            case c_exp
            by solve( !KU( ~eph ) @ #vk.24 )
          qed
        next
          case c_senc
          solve( !KU( sign(<'oid4vp_req', $V.1, h(verifierEPk), ~nReq>, ~vsk.2)
                 ) @ #vk.31 )
            case OID4VP_REQ
            solve( !KU( 'g'^(~eph*~eph.1) ) @ #vk.22 )
              case IDENTIFY_REQ
              by solve( !KU( ~eph.1 ) @ #vk.32 )
            next
              case SCAN_RESP
              by solve( !KU( ~eph ) @ #vk.32 )
            next
              case c_exp
              by solve( !KU( ~eph ) @ #vk.34 )
            qed
          next
            case c_sign
            solve( !KU( ~vsk.2 ) @ #vk.32 )
              case VerifierLeak
              solve( !KU( ~nReq ) @ #vk.32 )
                case OID4VP_REQ
                solve( !KU( kdf('g'^(~eph*~eph.1), n) ) @ #vk.18 )
                  case c_kdf
                  solve( !KU( 'g'^(~eph*~eph.1) ) @ #vk.33 )
                    case IDENTIFY_REQ
                    by solve( !KU( ~eph.1 ) @ #vk.34 )
                  next
                    case SCAN_RESP
                    by solve( !KU( ~eph ) @ #vk.34 )
                  next
                    case c_exp
                    by solve( !KU( ~eph ) @ #vk.36 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( ~wsk ) @ #vk.16 )
        case WalletLeak
        by contradiction /* from formulas */
      qed
    qed
  qed
qed























/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.8.0
Maude version 3.2.1
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2023-09-02 13:40:44.835695 UTC
*/

end