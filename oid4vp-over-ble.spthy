theory OpenID4VP_Over_BLE
begin

heuristic: O "./oracle.py"

builtins: diffie-hellman, symmetric-encryption, signing

functions: kdf/2, h/1

rule VerifierSetup:
  [ Fr(~vsk) ]
  -->
  [ !Verifier($V, ~vsk) ]

rule VerifierLeak:
  [ !Verifier($V, ~vsk) ]
  --[ SomeCompromise()
    , CompromisedVerifier($V) ]->
  [ Out(~vsk) ]

rule WalletSetup:
  [ Fr(~wsk) ]
  --[ HonestWalletKey(pk(~wsk)) ]->
  [ !Wallet($W, ~wsk) ]

rule WalletLeak:
  [ !Wallet($W, ~wsk) ]
  --[ SomeCompromise()
    , CompromisedWallet($W, pk(~wsk)) ]->
  [ Out(~wsk) ]

rule SCAN_RESP:
  [ Fr(~eph), !Verifier($V, vsk) ]
  -->
  [ Out(<'resp', 'g'^~eph>), !St_VerInit($V, ~eph) ]

rule IDENTIFY_REQ:
  let sharedKey = kdf(verifierEPk^~eph, ~n)
  in
  [ In(<'resp', verifierEPk>), !Wallet($W, ~wsk), Fr(~n), Fr(~eph) ]
  -->
  [ Out(<'identify_req', 'g'^~eph, ~n>), St_WalletRdy($W, 'g'^~eph, verifierEPk, sharedKey) ]

rule OID4VP_REQ:
  let sharedKey = kdf(walletEPk^~eph, n)
      req = <'oid4vp_req', $V, h('g'^~eph), ~nReq>
  in
  [ In(<'identify_req', walletEPk, n>), Fr(~nReq), !St_VerInit($V, ~eph), !Verifier($V, ~vsk) ]
  --[ InitVerifier($V, sharedKey, n) ]->
  [ Out(senc(<req, sign(req, ~vsk)>, sharedKey)), St_VerRdy($V, walletEPk, sharedKey, ~nReq) ]

rule OID4VP_RESP:
  let vc = <'vc', pk(~wsk), h(<n, walletEPk>), ~token>
    req = <'oid4vp_req', $V, h(verifierEPk), n>
  in
  [ !Verifier($V, ~vsk), !Wallet($W, ~wsk), Fr(~token)
  , In(senc(<req, reqSig>, sharedKey)), St_WalletRdy($W, walletEPk, verifierEPk, sharedKey) ]
  --[ SecretFor($V, ~token)
    , SendVC($W, pk(~wsk), $V, sharedKey, n, ~token)
    , VerifiableCredential(vc)
    , Eq(verify(reqSig, req, pk(~vsk)), true) ]->
  [ Out(senc(<vc, sign(vc, ~wsk)>, sharedKey)) ]

rule OID4VP_RECV:
  let vc = <'vc', wpk, h(<n, walletEPk>), t>
  in
  [ In(senc(<vc, vcSig>, sharedKey)), St_VerRdy($V, walletEPk, sharedKey, n) ]
  --[ Success($V, sharedKey, wpk, n, t)
    , Eq(verify(vcSig, vc, wpk), true) ]->
  []

restriction Eq:
    "All a b #t. Eq(a, b) @ #t ==> a = b"

lemma Exec:
  exists-trace
  "Ex #x #y w wpk v k t n.
        SendVC(w, wpk, v, k, n, t) @ #x
      & Success(v, k, wpk, n, t) @ #y
      & (not Ex #x. SomeCompromise() @ #x)"

lemma Secrecy:
  "All #t v m.
        SecretFor(v, m) @ #t
    ==>   (not Ex #u. K(m) @ #u)
        | (Ex #u. CompromisedVerifier(v) @ #u)"

lemma InjectiveAgreement:
  "All v shk wpk n token #t.
          Success(v, shk, wpk, n, token) @ #t
    ==>   (Ex w #x. SendVC(w, wpk, v, shk, n, token) @ #x
            & ( All w2 wpk2 v2 shk2 token2 #x2.
                  // For *injective* agreement, we fix the nonce, not the token.
                  // Fixing the token is pointless, as it is freshly generated
                  // in the rule that is annotated with SendVC.
                  SendVC(w2, wpk2, v2, shk2, n, token2) @ #x2
              ==> w = w2 & wpk = wpk2 & v = v2 & shk = shk2 & token = token2 & #x = #x2))
        | (Ex #x. CompromisedVerifier(v) @ #x)
        | (Ex w #x. CompromisedWallet(w, wpk) @ #x)
        | (not Ex #x. HonestWalletKey(wpk) @ #x)"

end
