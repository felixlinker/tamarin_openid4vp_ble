theory OpenID4VP_Over_BLE
begin

heuristic: o "./oracle.py"

builtins: diffie-hellman, symmetric-encryption, signing

functions: kdf/2, h/1

rule VerifierSetup:
  [ Fr(~vsk) ]
  -->
  [ !Verifier($V, ~vsk) ]

rule WalletSetup:
  [ Fr(~wsk) ]
  -->
  [ !Wallet($W, ~wsk) ]

// TODO: We skip first two parts of connection establishment for now

rule SCAN_RESP:
  [ Fr(~eph), !Verifier($V, vsk) ]
  -->
  [ Out(<'resp', 'g'^~eph>), St_VerInit($V, ~eph) ]

rule IDENTIFY_REQ:
  let sharedKey = kdf(verifierEPk^~eph, ~n)
  in
  [ In(<'resp', verifierEPk>), !Wallet($W, ~wsk), Fr(~n), Fr(~eph) ]
  -->
  [ Out(<'identify_req', 'g'^~eph, ~n>), St_WalletRdy($W, sharedKey) ]

rule OID4VP_REQ:
  let sharedKey = kdf(walletEPk^~eph, n)
      // req = <'oid4vp_req', $V, h(sharedKey), ~nReq>
      req = <'oid4vp_req', $V, ~nReq>
  in
  [ In(<'identify_req', walletEPk, n>), Fr(~nReq), St_VerInit($V, ~eph), !Verifier($V, ~vsk) ]
  --[ InitVerifier($V, sharedKey, n) ]->
  [ Out(senc(<req, sign(req, ~vsk)>, sharedKey)), St_VerRdy($V, sharedKey, ~nReq) ]

rule OID4VP_RESP:
  // TODO: I implicitly use AEAD here
  let vc = <'vc', pk(~wsk), n, ~token>
    // req = <'oid4vp_req', $V, h(sharedKey), n>
    req = <'oid4vp_req', $V, n>
  in
  [ !Verifier($V, ~vsk), !Wallet($W, ~wsk), Fr(~token)
  , In(senc(<req, reqSig>, sharedKey)), St_WalletRdy($W, sharedKey) ]
  --[ Secret(~token)
    , SendVC($V, sharedKey, n, ~token)
    , VerifiableCredential(vc)
    , Eq(verify(reqSig, req, pk(~vsk)), true) ]->
  [ Out(senc(<vc, sign(vc, ~wsk)>, sharedKey)) ]

rule OID4VP_RECV:
  let vc = <'vc', wpk, n, t>
  in
  [ In(senc(<vc, vcSig>, sharedKey)), St_VerRdy($V, sharedKey, n) ]
  --[ Success($V, sharedKey, n, t)
    , Eq(verify(vcSig, vc, wpk), true) ]->
  []

restriction Eq:
    "All a b #t. Eq(a, b) @ #t ==> a = b"

lemma Exec:
  exists-trace
  "Ex #x #y v k t n. SendVC(v, k, t, n) @ #x & Success(v, k, t, n) @ #y"

lemma Secrecy:
  "All #t m. Secret(m) @ #t ==> not Ex #u. K(m) @ #u"

lemma InjectiveAgreement:
  "All v1 v2 k1 k2 n1 n2 token #t #u.
          Success(v1, k1, n1, token) @ #t
        & SendVC(v2, k2, n2, token) @ #u
    ==>   v1 = v2 & k1 = k2 & n1 = n2
        & ( All v3 k3 n3 #x. Success(v3, k3, n3, token) @ #x
            ==> k1 = k3 & n1 = n3 & #t = #x)"

end
